package list;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;

class Task extends JPanel {
    JLabel index;
    JTextField taskName;
    JButton done, delete;
    boolean checked = false;
    Color pink = new Color(255, 161, 161);
    Color green = new Color(188, 226, 158);
    Dimension buttonSize = new Dimension(80, 30); // Define a preferred size for the buttons

    Task() {
        this.setLayout(new BorderLayout());
        this.setBackground(pink);

        // Task index label
        index = new JLabel("");
        this.add(index, BorderLayout.WEST);

        // Task name text field
        taskName = new JTextField("Write something..");
        taskName.setBackground(pink);
        this.add(taskName, BorderLayout.CENTER);

        // Panel for Done and Delete buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        
        // Done button
        done = new JButton("Done");
        done.setBackground(new Color(233, 119, 119));
        done.setPreferredSize(buttonSize); // Set preferred size
        buttonPanel.add(done);

        // Delete button
        delete = new JButton("Delete");
        delete.setBackground(new Color(255, 105, 97)); // Reddish color for delete button
        delete.setPreferredSize(buttonSize); // Set preferred size
        buttonPanel.add(delete);
        
        // Add the button panel to the Task panel
        this.add(buttonPanel, BorderLayout.EAST);
    }

    public void changeIndex(int num) {
        index.setText(num + "");
    }

    public void changeState() {
        this.setBackground(green);
        taskName.setBackground(green);
        checked = true;
        done.setEnabled(false); // Disable done button after completion
        delete.setEnabled(false); // Disable delete button after completion
    }
}

class TaskList {
    private ArrayList<Task> tasks;

    TaskList() {
        tasks = new ArrayList<>();
    }

    public void addTask(Task task) {
        tasks.add(task);
    }

    public void removeTask(Task task) {
        tasks.remove(task);
    }

    public ArrayList<Task> getTasks() {
        return tasks;
    }

    public int getSize() {
        return tasks.size();
    }
}

class ListPanel extends JPanel {
    TaskList taskList;

    ListPanel(TaskList taskList) {
        this.taskList = taskList;
        setLayout(new GridLayout(10, 1, 0, 5));
        setBackground(new Color(252, 221, 176));
    }

    public void updateDisplay() {
        removeAll(); // Clear existing components
        for (int i = 0; i < taskList.getSize(); i++) {
            Task task = taskList.getTasks().get(i);
            task.changeIndex(i + 1);
            add(task);
        }
        revalidate();
        repaint();
    }

    public void removeCompletedTasks() {
        ArrayList<Task> completedTasks = new ArrayList<>();
        for (Task task : taskList.getTasks()) {
            if (task.checked) {
                completedTasks.add(task);
            }
        }
        for (Task task : completedTasks) {
            taskList.removeTask(task);
        }
        updateDisplay();
    }
}

class Footer extends JPanel {
    JButton addTask = new JButton("Add Task"), clear = new JButton("Clear finished tasks");

    Footer() {
        setLayout(new FlowLayout());
        setBackground(new Color(252, 221, 176));
        addTask.setBackground(new Color(233, 133, 128));
        clear.setBackground(new Color(233, 133, 128));
        add(addTask);
        add(clear);
    }
}

class AppFrame extends JFrame {
    TaskList taskList = new TaskList();
    ListPanel listPanel = new ListPanel(taskList);
    Footer footer = new Footer();

    AppFrame() {
        setTitle("To-Do List");
        setSize(400, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Title bar
        add(new JLabel("To Do List", JLabel.CENTER), BorderLayout.NORTH);

        // Main task list and footer
        add(listPanel, BorderLayout.CENTER);
        add(footer, BorderLayout.SOUTH);

        // Add Task button listener
        footer.addTask.addActionListener(e -> {
            Task task = new Task();
            taskList.addTask(task);
            listPanel.updateDisplay();

            // Done button listener
            task.done.addActionListener(evt -> task.changeState());

            // Delete button listener
            task.delete.addActionListener(evt -> {
                taskList.removeTask(task);
                listPanel.updateDisplay();
            });
        });

        // Clear finished tasks button listener
        footer.clear.addActionListener(e -> listPanel.removeCompletedTasks());

        setVisible(true);
    }
}

public class ToDoListApp {
    public static void main(String[] args) {
        new AppFrame();
    }
}
